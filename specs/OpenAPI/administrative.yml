openapi: 3.0.3
info:
  title: Central Operations API
  version: 0.1.0
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  description: Component responsible for central operations control in the BÃ¼rokratt network.
servers:
  - url: 'http://localhost:3000'
paths:
  /admin/participants:
    get:
      summary: Get endpoint for getting an array of participants
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Participant'
      operationId: get-participants
      description: (For Admin) Get all participants
      tags:
        - admin/participants
    post:
      summary: Post endpoint for creating an participant
      operationId: post-participants
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
      description: (For Admin) Create a new participant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Participant'
        description: ''
      tags:
        - admin/participants
    parameters: []
  /admin/institutions:
    get:
      summary: Get endpoint for getting an array of institutions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Institution'
      operationId: get-private-api-institutions
      description: (For Admin) Get all institutions
      tags:
        - admin/institutions
    post:
      summary: Post endpoint for adding new institutions
      operationId: post-private-api-institutions
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
      description: (For Admin) Create a new institution
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Institution'
      tags:
        - admin/institutions
    parameters: [ ]
  '/admin/participants/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Participant ID
    delete:
      summary: 'endpoint to delete participant based on id'
      operationId: delete-admin-participant
      responses:
        '204':
          description: No Content
      description: (For Admin) Delete participant by id
      tags:
        - admin/participants
    put:
      summary: 'endpoint for updating the participant based on the id'
      operationId: put-admin-participant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Participant'
      description: (For Admin) Update specific participant
      tags:
        - admin/participants
    get:
      summary: 'endpoint for getting the participant based on the id'
      operationId: get-admin-participant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
      description: (For Admin) Get specific participant by id with sensitive info in payload (e.g. apiKey)
      tags:
        - admin/participants
  '/admin/institutions/{id}':
    get:
      summary: Get endpoint for getting a institution by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
      operationId: get-private-api-institution
      description: (For Admin) Get specific institution by id
      tags:
        - admin/institutions
    put:
      summary: 'endpoint for updating the institution based on the id'
      operationId: put-admin-institution
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Institution'
      description: (For Admin) Update specific institution
      tags:
        - admin/institutions
    delete:
      summary: 'endpoint to delete institution based on id'
      operationId: delete-admin-institution
      responses:
        '204':
          description: No Content
      description: (For Admin) Delete institution by id
      tags:
        - admin/institutions
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Institution ID
  /participants:
    get:
      summary: Get endpoint for getting non-confidential participants
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicParticipant'
      operationId: get-public-api-participants
      parameters:
        - schema:
            type: string
          in: query
          name: type
          description: Participant type
        - schema:
            type: string
          in: query
          name: institutionId
          description: Institution ID
        - $ref: '#/components/parameters/X-Api-Key'
      description: (For Participants) Get all participants with sensitive info removed from payload
      tags:
        - participants
    parameters: [ ]
  /institutions:
    get:
      summary: Get endpoint for getting non-confidential institutions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicInstitution'
      operationId: get-public-api-institutions
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
      description: (For Participants) Get all institutions with sensitive info removed from payload
      tags:
        - institutions
    parameters: [ ]
  /admin/instances:
    post:
      summary: 'Create a new instance'
      operationId: post-admin-instances
      responses:
        '201':
          description: Instance created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instance'
      description: (For Admin) Create a new instance
      tags:
        - admin/instances
  '/admin/instances/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Instance ID
    get:
      summary: 'Get specific instance by ID'
      operationId: get-admin-instance
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
      description: (For Admin) Get specific instance by ID
      tags:
        - admin/instances
    put:
      summary: 'Update specific instance by ID'
      operationId: put-admin-instance
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instance'
      description: (For Admin) Update specific instance by ID
      tags:
        - admin/instances
    delete:
      summary: 'Delete specific instance by ID'
      operationId: delete-admin-instance
      responses:
        '204':
          description: No Content
      description: (For Admin) Delete specific instance by ID
      tags:
        - admin/instances
  /instances:
    get:
      summary: 'Get all instances'
      operationId: get-instances
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Instance'
      description: Get all instances
      tags:
        - instances
  /admin/participants/status:
    get:
      summary: 'Get status of all participants'
      operationId: get-admin-participants-status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParticipantStatus'
      description: (For Admin) Get status of all participants
      tags:
        - admin/participants
  '/admin/participants/status/{participant-type}':
    parameters:
      - schema:
          type: string
        name: participant-type
        in: path
        required: true
        description: Type of the participant
    get:
      summary: 'Get status of participants of a specific type'
      operationId: get-admin-participants-status-by-type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParticipantStatus'
      description: (For Admin) Get status of participants of a specific type
      tags:
        - admin/participants
  '/admin/participants/status/{participant-type}/{id}':
    parameters:
      - schema:
          type: string
        name: participant-type
        in: path
        required: true
        description: Type of the participant
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Participant ID
    get:
      summary: 'Get status of a specific participant of a specific type'
      operationId: get-admin-participants-status-by-type-and-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantStatus'
      description: (For Admin) Get status of a specific participant of a specific type
      tags:
        - admin/participants
  /outages/planned:
    get:
      summary: 'Get a list of planned outages'
      operationId: get-planned-outages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Outage'
      description: (For Users) Get a list of planned outages
      tags:
        - outages
  '/outages/planned/participants/{participant-id}':
    parameters:
      - schema:
          type: string
        name: participant-id
        in: path
        required: true
        description: Participant ID
    get:
      summary: 'Get a list of planned outages for a specific participant'
      operationId: get-planned-outages-for-participant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Outage'
      description: (For Users) Get a list of planned outages for a specific participant
      tags:
        - outages
    post:
      summary: 'Create a new planned outage for a specific participant'
      operationId: post-planned-outage-for-participant
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outage'
      description: (For Admin) Create a new planned outage for a specific participant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Outage'
      tags:
        - admin/outages
  /announcements/outages/planned:
    post:
      summary: 'Create a new planned outage announcement'
      operationId: post-planned-outage-announcement
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
      description: (For Admin) Create a new planned outage announcement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      tags:
        - admin/announcements
  /announcements/outages/unplanned:
    post:
      summary: 'Create a new unplanned outage announcement'
      operationId: post-unplanned-outage-announcement
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
      description: (For Admin) Create a new unplanned outage announcement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      tags:
        - admin/announcements
  /announcements/updates/planned:
    get:
      summary: 'Get all planned update announcements'
      operationId: get-planned-update-announcements
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Announcement'
      description: Get all planned update announcements
      tags:
        - announcements

    post:
      summary: 'Create a new planned update announcement'
      operationId: post-planned-update-announcement
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
      description: (For Admin) Create a new planned update announcement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      tags:
        - admin/announcements
  /announcements/updates/critical:
    post:
      summary: 'Create a new critical update announcement'
      operationId: post-critical-update-announcement
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
      description: (For Admin) Create a new critical update announcement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Announcement'
      tags:
        - admin/announcements
  /participants/application:
    post:
      summary: 'Create a new participant application'
      operationId: post-participant-application
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantApplication'
      description: Create a new participant application
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantApplication'
      tags:
        - participants
  /admin/participants/application/{application-id}:
    post:
      summary: 'Update a participant application with an admin action'
      operationId: post-admin-participant-application
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantApplication'
      description: (For Admin) Update participant application by id
      parameters:
        - schema:
            type: string
          name: application-id
          in: path
          required: true
          description: Participant Application ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantApplication'
      tags:
        - admin/participants
  /admin/participants/status/{uuid}:
    put:
      summary: 'Update the status of a participant'
      operationId: put-admin-participant-status
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
      description: (For Admin) Update participant status by id
      parameters:
        - schema:
            type: string
          name: uuid
          in: path
          required: true
          description: Participant ID
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: New status for the participant
              required:
                - status
      tags:
        - admin/participants
  /admin/participants/invitation:
    post:
      summary: 'Send an invitation to a potential participant'
      operationId: post-admin-participant-invitation
      responses:
        '201':
          description: Invitation sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  invitationId:
                    type: string
                    description: Unique identifier of the sent invitation
      description: (For Admin) Send an invitation to a potential participant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email address of the potential participant
              required:
                - email
      tags:
        - admin/participants
  /validate-invitation-id:
    post:
      summary: 'Validate an invitation ID'
      operationId: post-validate-invitation-id
      responses:
        '200':
          description: Invitation ID is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ 'valid', 'invalid' ]
                    description: The validation status of the provided invitation ID
        '400':
          description: Bad Request, invitation ID is missing or invalid
      description: Validate an invitation ID received by a participant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                invitationId:
                  type: string
                  description: The invitation ID to validate
              required:
                - invitationId
      tags:
        - participants
  /institution:
    post:
      summary: 'Create a new institution'
      operationId: post-institution
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        '400':
          description: Bad Request
      description: Create a new institution
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Institution'
        required: true
      tags:
        - institutions
components:
  schemas:
    Participant:
      title: Participant
      type: object
      description: ''
      properties:
        id:
          type: string
          format: uuid
          example: 141ee581-6d97-4845-968a-43f41464c677
          readOnly: true
        name:
          type: string
          example: NLib
          readOnly: false
        type:
          type: string
          enum:
            - Dmr
            - Chatbot
            - Classifier
          example: Chatbot
        institutionId:
          type: string
        host:
          type: string
          example: 'http://nlib.gov:12133'
        apiKey:
          type: string
      required:
        - id
        - type
        - institutionId
        - host
        - apiKey
    PublicParticipant:
      title: PublicParticipant
      type: object
      description: ''
      properties:
        id:
          type: string
          format: uuid
          example: 141ee581-6d97-4845-968a-43f41464c677
          readOnly: true
        name:
          type: string
          example: NLib
          readOnly: true
        type:
          type: string
          enum:
            - Dmr
            - Chatbot
            - Classifier
          example: Chatbot
        institutionId:
          type: string
        host:
          type: string
          example: 'http://nlib.gov:12133'
      required:
        - id
        - type
        - institutionId
        - host
    Institution:
      title: PublicInstitution
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        status:
          type: string
          enum:
            - Active
            - Disabled
      required:
        - id
        - name
        - status
    PublicInstitution:
      title: Institution
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        status:
          type: string
          enum:
            - Active
            - Disabled
      required:
        - id
        - name
        - status
    Instance:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 12aa3456-b789-123c-d456-78ef9012gh34
          readOnly: true
        name:
          type: string
          example: Instance1
          readOnly: false
      required:
        - id
        - name
    Outage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          type: string
          enum:
            - Planned
            - Unplanned
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        description:
          type: string
      required:
        - id
        - type
        - startTime
        - endTime
    ParticipantApplication:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        participantId:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - Pending
            - Approved
            - Rejected
      required:
        - id
        - participantId
        - status
    Announcement:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          type: string
          enum:
            - OutagePlanned
            - OutageUnplanned
            - UpdatePlanned
            - UpdateCritical
        message:
          type: string
      required:
        - id
        - type
        - message
    ParticipantStatus:
      type: object
      properties:
        participantId:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - Active
            - Inactive
      required:
        - participantId
        - status
  parameters:
    X-Api-Key:
      name: X-Api-Key
      in: header
      required: true
      schema:
        type: string
      description: Temporary solution to get started with authentication. Key is provided on registration.
tags:
  - name: admin/participants
    description: Participant management
  - name: admin/institutions
    description: Institution management
  - name: institutions
    description: Institutions queryable by participants
  - name: participants
    description: Participants queryable by participants
  - name: admin/instances
    description: Instance management
  - name: instances
    description: Instances queryable by participants
  - name: outages
    description: Outages queryable by participants
  - name: admin/outages
    description: outage management
  - name: admin/announcements
    description: announcement management
  - name: announcements
    description: announcements queryable by participants